{"category":"blynk","color":"#13db81","blocks":["__blynk_init","__blynk_write","__blynk_read","__blynk_notify","__blynk_appconnected"],"jscode":"// Block __blynk_init\nvar __blynk_init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"blynk init\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"token\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"token\"\n        }\n    ],\n    \"colour\": \"#13db81\"\n};\n\nwindow['Blockly'].Blocks['__blynk_init'] = {\n    init: function() {\n        this.jsonInit(__blynk_init_json);\n    }\n};\n\nwindow['Blockly'].Python['__blynk_init'] = function(block) {\n    var token = Blockly.Python.valueToCode(block, 'token', Blockly.Python.ORDER_NONE);\n    return `# (c) stonatm@gmail.com\n# Blynk access via REST API\nclass blynk:\n\n  import urequests\n\n  AUTH_TOKEN = ''\n  initialise = False\n\n  def _parse_in(text):\n    out = str(text)\n    out = out.replace('[','')\n    out = out.replace(']','')\n    out = out.replace('\"','')\n    return out\n\n  def _parse_out(text):\n    out = str(text)\n    out = out.replace(' ','%20')\n    return out\n\n  def init(token):\n    blynk.AUTH_TOKEN = token\n    blynk.initialise = True\n\n  def write_pin(pin, value):\n    if not blynk.initialise:\n      return\n    url = 'http://blynk-cloud.com/' + blynk.AUTH_TOKEN + '/update/' + str(pin) + '?value=' + str(blynk._parse_out(value))\n    response = blynk.urequests.get( url )\n    return( blynk._parse_in(response.text) )\n\n  def read_pin(pin):\n    if not blynk.initialise:\n      return\n    url = 'http://blynk-cloud.com/' + blynk.AUTH_TOKEN + '/get/' + str(pin)\n    response = blynk.urequests.get( url )\n    return( blynk._parse_in(response.text) )\n\n  def notify(message):\n    if not blynk.initialise:\n      return\n    headers = {'Content-Type':'application/json'}\n    values = '{\"body\":\"' + str(message) + '\"}'\n    url = 'http://blynk-cloud.com/' + blynk.AUTH_TOKEN + '/notify'\n    response = blynk.urequests.post( url, data = values ,headers = headers)\n    return( blynk._parse_in(response.text) )\n\n  def is_app_connected():\n    if not blynk.initialise:\n      return\n    url = 'http://blynk-cloud.com/' + blynk.AUTH_TOKEN + '/isAppConnected'\n    response = blynk.urequests.get( url )\n    return( blynk._parse_in(response.text) )\n\nbl = blynk\nbl.init( ${token} )\n` + \"\\n\";\n};\n\n// Block __blynk_write\nvar __blynk_write_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"blynk write pin\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"pin\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"pin\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"value\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"value\"\n        }\n    ],\n    \"colour\": \"#13db81\"\n};\n\nwindow['Blockly'].Blocks['__blynk_write'] = {\n    init: function() {\n        this.jsonInit(__blynk_write_json);\n    }\n};\n\nwindow['Blockly'].Python['__blynk_write'] = function(block) {\n    var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_NONE);\nvar value = Blockly.Python.valueToCode(block, 'value', Blockly.Python.ORDER_NONE);\n    return `bl.write_pin( ${pin}, ${value} )` + \"\\n\";\n};\n\n// Block __blynk_read\nvar __blynk_read_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"blynk read pin\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"pin\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"pin\"\n        }\n    ],\n    \"colour\": \"#13db81\"\n};\n\nwindow['Blockly'].Blocks['__blynk_read'] = {\n    init: function() {\n        this.jsonInit(__blynk_read_json);\n    }\n};\n\nwindow['Blockly'].Python['__blynk_read'] = function(block) {\n    var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_NONE);\n    return [`bl.read_pin( ${pin} )`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __blynk_notify\nvar __blynk_notify_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"blynk notify\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"message\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"message\"\n        }\n    ],\n    \"colour\": \"#13db81\"\n};\n\nwindow['Blockly'].Blocks['__blynk_notify'] = {\n    init: function() {\n        this.jsonInit(__blynk_notify_json);\n    }\n};\n\nwindow['Blockly'].Python['__blynk_notify'] = function(block) {\n    var message = Blockly.Python.valueToCode(block, 'message', Blockly.Python.ORDER_NONE);\n    return `bl.notify( ${message} )` + \"\\n\";\n};\n\n// Block __blynk_appconnected\nvar __blynk_appconnected_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"blynk is app connected\"\n        }\n    ],\n    \"colour\": \"#13db81\"\n};\n\nwindow['Blockly'].Blocks['__blynk_appconnected'] = {\n    init: function() {\n        this.jsonInit(__blynk_appconnected_json);\n    }\n};\n\nwindow['Blockly'].Python['__blynk_appconnected'] = function(block) {\n        return [`bl.is_app_connected()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n"}